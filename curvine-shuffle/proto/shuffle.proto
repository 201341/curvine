syntax = "proto2";
package proto;

option java_package = "io.curvine.proto";
option java_multiple_files = true;
option java_outer_classname = "ShuffleProto";

message StageKeyProto {
    required string app_id = 1;
    required string stage_id = 2;
}

message SplitKeyProto {
    required int32 part_id = 1;
    required int32 split_id = 2;
}

message InetAddrProto {
    required string hostname = 1;
    required int32 port = 2;
}

message SplitInfoProto {
    required int32 part_id = 1;
    required int32 split_id = 2;
    required int64 write_len = 3;
    required InetAddrProto worker_addr = 4;
}


message AllocWriterRequest    {
    required StageKeyProto stage = 1;
    required int32 part_id = 2;
    required int64 split_size = 3;
    optional SplitInfoProto full_split = 4;
    repeated uint32 exclude_workers = 5;
}

message AllocWriterResponse {
    required StageKeyProto stage = 1;
    required int32 part_id = 2;
    required SplitInfoProto cur_split = 3;
}

message WriteDataRequest {
    required StageKeyProto stage = 1;
    required int32 part_id = 2;
    required int32 split_id = 3;
    required int64 split_size = 4;
}

message WriteDataResponse {
    optional SplitInfoProto full_split = 1;
}

message TaskCommitRequest {
    required StageKeyProto stage = 1;
    required int32 task_id = 2;
    required int32 num_tasks = 3;
}

message TaskCommitResponse {
}

// shuffle stage submission. This submission has two meanings:
// 1. Aggregate shuffle, is_merge = true, submission can only be made after all tasks are completed
// 2. Normal shuffle, is_merge = false, after the task is completed, the writer can submit immediately.
message StageCommitRequest {
    required StageKeyProto stage = 1;
}

message StageCommitResponse {
    repeated SplitKeyProto splits = 1;
}
